import{t as s,h as y,m as N,u as _,i as t,s as C,d as w,e as x,c as e}from"./vendor.e8debed0.js";import{C as r}from"./Card.e4573490.js";import{G as k}from"./GithubSource.55125800.js";const z=s("<table></table>"),B=s("<div></div>"),A={},P=p=>{const[d,m]=y(N(A,p),["bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive"]),l=_(d.bsPrefix,"table"),o=()=>x(d.className,l,d.variant&&`${l}-${d.variant}`,d.size&&`${l}-${d.size}`,d.striped&&`${l}-striped`,d.bordered&&`${l}-bordered`,d.borderless&&`${l}-borderless`,d.hover&&`${l}-hover`),i=()=>(()=>{const n=z.cloneNode(!0);return C(n,m,!1,!1),w(()=>n.className=o()),n})();if(d.responsive){let n=`${l}-responsive`;return typeof d.responsive=="string"&&(n=`${n}-${d.responsive}`),(()=>{const h=B.cloneNode(!0);return h.className=n,t(h,i),h})()}return i};var c=P;const S=s(`<div class="mt-5"><h2>API</h2><h3>Table</h3><code>import Table from 'solid-bootstrap/Table'</code><div class="overflow-auto mt-4 mb-5 border border-light"><table class="bg-white mb-0 table table-striped table-bordered"><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td class="font-monospace">bordered </td><td class="font-monospace"><div>boolean</div></td><td></td><td><div><p>Adds borders on all sides of the table and cells.</p></div></td></tr><tr><td class="font-monospace">borderless </td><td class="font-monospace"><div>boolean</div></td><td></td><td><div><p>Removes all borders on the table and cells, including table header.</p></div></td></tr><tr><td class="font-monospace">hover </td><td class="font-monospace"><div>boolean</div></td><td></td><td><div><p>Enable a hover state on table rows within a <code>&lt;tbody&gt;</code>.</p></div></td></tr><tr><td class="font-monospace">responsive </td><td class="font-monospace"><div>boolean | string</div></td><td></td><td><div><p>Responsive tables allow tables to be scrolled horizontally with ease. Across every breakpoint, use <code>responsive</code> for horizontally scrolling tables. Responsive tables are wrapped automatically in a <code>div</code>. Use <code>responsive="sm"</code>, <code>responsive="md"</code>, <code>responsive="lg"</code>, or<code>responsive="xl"</code> as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.</p></div></td></tr><tr><td class="font-monospace">size </td><td class="font-monospace"><div>string</div></td><td></td><td><div><p>Make tables more compact by cutting cell padding in half by setting size as <code>sm</code>.</p></div></td></tr><tr><td class="font-monospace">striped </td><td class="font-monospace"><div>boolean</div></td><td></td><td><div><p>Adds zebra-striping to any table row within the <code>&lt;tbody&gt;</code>.</p></div></td></tr><tr><td class="font-monospace">variant </td><td class="font-monospace"><div>string</div></td><td></td><td><div><p>Invert the colors of the table \u2014 with light text on dark backgrounds by setting variant as <code>dark</code>.</p></div></td></tr><tr><td class="font-monospace">bsPrefix </td><td class="font-monospace"><div>string</div></td><td><code>'table'</code></td><td><div><p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p></div></td></tr></tbody></table></div></div>`),H=()=>S.cloneNode(!0),f=s("<thead><tr><th>#</th><th>First Name</th><th>Last Name</th><th>Username</th></tr></thead>"),g=s('<tbody><tr><td>1</td><td>Mark</td><td>Otto</td><td>@mdo</td></tr><tr><td>2</td><td>Jacob</td><td>Thornton</td><td>@fat</td></tr><tr><td>3</td><td colspan="2">Larry the Bird</td><td>@twitter</td></tr></tbody>'),D=s("<thead><tr><th>#</th></tr></thead>"),R=s("<tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr></tbody>"),u=s("<thead><tr><th>#</th><th>Table heading</th><th>Table heading</th><th>Table heading</th><th>Table heading</th><th>Table heading</th><th>Table heading</th></tr></thead>"),v=s("<tbody><tr><td>1</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td></tr><tr><td>2</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td></tr><tr><td>3</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td></tr></tbody>"),j=s("<div></div>"),G=s('<div class="row gy-4"><div><h2>Tables</h2><p class="lead">Use the <code>striped</code>, <code>bordered</code> and <code>hover</code> props to customise the table.</p></div><div></div></div>'),U=s("<th>Table heading</th>"),$=s("<td>Table cell </td>"),L=()=>(()=>{const p=G.cloneNode(!0),d=p.firstChild,m=d.firstChild,l=d.nextSibling;return t(d,e(k,{name:"TableDocs"}),m),t(l,e(r,{get children(){return[e(r.Header,{children:"Striped, Bordered, Hover"}),e(r.Body,{get children(){return e(c,{striped:!0,bordered:!0,hover:!0,get children(){return[f.cloneNode(!0),g.cloneNode(!0)]}})}})]}}),null),t(l,e(r,{get children(){return[e(r.Header,{children:"Small Table"}),e(r.Body,{get children(){return e(c,{striped:!0,bordered:!0,hover:!0,size:"sm",get children(){return[f.cloneNode(!0),g.cloneNode(!0)]}})}})]}}),null),t(l,e(r,{get children(){return[e(r.Header,{children:"Dark Table"}),e(r.Body,{get children(){return e(c,{striped:!0,bordered:!0,hover:!0,variant:"dark",get children(){return[f.cloneNode(!0),g.cloneNode(!0)]}})}})]}}),null),t(l,e(r,{get children(){return[e(r.Header,{children:"Responsive"}),e(r.Body,{get children(){return e(c,{responsive:!0,get children(){return[(()=>{const o=D.cloneNode(!0),i=o.firstChild;return i.firstChild,t(i,()=>Array.from({length:12}).map((n,h)=>U.cloneNode(!0)),null),o})(),(()=>{const o=R.cloneNode(!0),i=o.firstChild;i.firstChild;const n=i.nextSibling;n.firstChild;const h=n.nextSibling;return h.firstChild,t(i,()=>Array.from({length:12}).map((T,b)=>(()=>{const a=$.cloneNode(!0);return a.firstChild,t(a,b,null),a})()),null),t(n,()=>Array.from({length:12}).map((T,b)=>(()=>{const a=$.cloneNode(!0);return a.firstChild,t(a,b,null),a})()),null),t(h,()=>Array.from({length:12}).map((T,b)=>(()=>{const a=$.cloneNode(!0);return a.firstChild,t(a,b,null),a})()),null),o})()]}})}})]}}),null),t(l,e(r,{get children(){return[e(r.Header,{children:"Breakpoint specific"}),e(r.Body,{get children(){const o=j.cloneNode(!0);return t(o,e(c,{responsive:"sm",get children(){return[u.cloneNode(!0),v.cloneNode(!0)]}}),null),t(o,e(c,{responsive:"md",get children(){return[u.cloneNode(!0),v.cloneNode(!0)]}}),null),t(o,e(c,{responsive:"lg",get children(){return[u.cloneNode(!0),v.cloneNode(!0)]}}),null),t(o,e(c,{responsive:"xl",get children(){return[u.cloneNode(!0),v.cloneNode(!0)]}}),null),o}})]}}),null),t(p,e(H,{}),null),p})();export{L as TableDocs,L as default};
