import{t as i,j as p,aa as v,i as r,c as e,w as t,ab as d}from"./vendor.16cab1e8.js";import{G as u}from"./GithubSource.74c2eee9.js";const h=i(`<div class="mt-5"><h2>API</h2><h3>ProgressBar</h3><code>import { ProgressBar } from 'solid-bootstrap'</code><div class="overflow-auto mt-4 mb-5 border border-light"><table class="bg-white mb-0 table table-striped table-bordered"><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td class="font-monospace">animated </td><td class="font-monospace"><div>boolean</div></td><td><code>false</code></td><td><div><p>Animate's the stripes from right to left</p></div></td></tr><tr><td class="font-monospace">children </td><td class="font-monospace"><div>onlyProgressBar</div></td><td></td><td><div><p>Child elements (only allows elements of type &lt;progressbar>)</p></div></td></tr><tr><td class="font-monospace">isChild </td><td class="font-monospace"><div>boolean</div></td><td><code>false</code></td><td><div></div></td></tr><tr><td class="font-monospace">label </td><td class="font-monospace"><div>node</div></td><td></td><td><div><p>Show label that represents visual percentage. EG. 60%</p></div></td></tr><tr><td class="font-monospace">max </td><td class="font-monospace"><div>number</div></td><td><code>100</code></td><td><div><p>Maximum value progress can reach</p></div></td></tr><tr><td class="font-monospace">min </td><td class="font-monospace"><div>number</div></td><td><code>0</code></td><td><div><p>Minimum value progress can begin from</p></div></td></tr><tr><td class="font-monospace">now </td><td class="font-monospace"><div>number</div></td><td></td><td><div><p>Current value of progress</p></div></td></tr><tr><td class="font-monospace">striped </td><td class="font-monospace"><div>boolean</div></td><td><code>false</code></td><td><div><p>Uses a gradient to create a striped effect.</p></div></td></tr><tr><td class="font-monospace">variant </td><td class="font-monospace"><div><span><code>'success'</code><span> | </span><code>'danger'</code><span> | </span><code>'warning'</code><span> | </span><code>'info'</code></span></div></td><td></td><td><div><p>Sets the background class of the progress bar.</p></div></td></tr><tr><td class="font-monospace">visuallyHidden </td><td class="font-monospace"><div>boolean</div></td><td><code>false</code></td><td><div><p>Hide's the label visually.</p></div></td></tr><tr><td class="font-monospace">bsPrefix </td><td class="font-monospace"><div>string</div></td><td><code>'progress-bar'</code></td><td><div><p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p></div></td></tr></tbody></table></div></div>`),m=()=>h.cloneNode(!0),g=i('<div class="row gy-4"><div><h2>Progress bars </h2><p class="lead">Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.</p></div><div></div></div>'),w=()=>{const[a,l]=p(5);{const o=window.setInterval(()=>{l(a()<100?a()+5:0)},1e3);v(()=>window.clearInterval(o))}return(()=>{const o=g.cloneNode(!0),s=o.firstChild,c=s.firstChild,n=s.nextSibling;return r(s,e(u,{name:"ProgressBarDocs"}),c),r(n,e(t,{get children(){return[e(t.Header,{children:"Default"}),e(t.Body,{get children(){return e(d,{now:60})}})]}}),null),r(n,e(t,{get children(){return[e(t.Header,{children:"With label"}),e(t.Body,{get children(){return e(d,{now:60,label:`${60}%`})}})]}}),null),r(n,e(t,{get children(){return[e(t.Header,{children:"Screenreader only label"}),e(t.Body,{get children(){return e(d,{now:60,label:`${60}%`,visuallyHidden:!0})}})]}}),null),r(n,e(t,{get children(){return[e(t.Header,{children:"Contextual alternatives"}),e(t.Body,{get children(){return[e(d,{variant:"success",now:40}),e(d,{variant:"info",now:20}),e(d,{variant:"warning",now:60}),e(d,{variant:"danger",now:80})]}})]}}),null),r(n,e(t,{get children(){return[e(t.Header,{children:"Striped"}),e(t.Body,{get children(){return[e(d,{striped:!0,variant:"success",now:40}),e(d,{striped:!0,variant:"info",now:20}),e(d,{striped:!0,variant:"warning",now:60}),e(d,{striped:!0,variant:"danger",now:80})]}})]}}),null),r(n,e(t,{get children(){return[e(t.Header,{children:"Animated"}),e(t.Body,{get children(){return e(d,{animated:!0,get now(){return a()},get label(){return`${a()}%`}})}})]}}),null),r(n,e(t,{get children(){return[e(t.Header,{children:"Stacked"}),e(t.Body,{get children(){return e(d,{get children(){return[e(d,{striped:!0,variant:"success",now:35}),e(d,{variant:"warning",now:20}),e(d,{striped:!0,variant:"danger",now:10})]}})}})]}}),null),r(o,e(m,{}),null),o})()};export{w as ProgressBarDocs,w as default};
